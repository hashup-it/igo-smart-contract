/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { USDTest, USDTestInterface } from "../USDTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_initialAmount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_tokenName",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimalUnits",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "_tokenSymbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "remaining",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620013dd380380620013dd833981810160405281019062000037919062000228565b836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600281905550826003908051906020019062000099929190620000d8565b5081600460006101000a81548160ff021916908360ff1602179055508060059080519060200190620000cd929190620000d8565b505050505062000481565b828054620000e69062000372565b90600052602060002090601f0160209004810192826200010a576000855562000156565b82601f106200012557805160ff191683800117855562000156565b8280016001018555821562000156579182015b828111156200015557825182559160200191906001019062000138565b5b50905062000165919062000169565b5090565b5b80821115620001845760008160009055506001016200016a565b5090565b60006200019f6200019984620002ef565b620002c6565b905082815260208101848484011115620001b857600080fd5b620001c58482856200033c565b509392505050565b600082601f830112620001df57600080fd5b8151620001f184826020860162000188565b91505092915050565b6000815190506200020b816200044d565b92915050565b600081519050620002228162000467565b92915050565b600080600080608085870312156200023f57600080fd5b60006200024f87828801620001fa565b945050602085015167ffffffffffffffff8111156200026d57600080fd5b6200027b87828801620001cd565b93505060406200028e8782880162000211565b925050606085015167ffffffffffffffff811115620002ac57600080fd5b620002ba87828801620001cd565b91505092959194509250565b6000620002d2620002e5565b9050620002e08282620003a8565b919050565b6000604051905090565b600067ffffffffffffffff8211156200030d576200030c6200040d565b5b62000318826200043c565b9050602081019050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156200035c5780820151818401526020810190506200033f565b838111156200036c576000848401525b50505050565b600060028204905060018216806200038b57607f821691505b60208210811415620003a257620003a1620003de565b5b50919050565b620003b3826200043c565b810181811067ffffffffffffffff82111715620003d557620003d46200040d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620004588162000325565b81146200046457600080fd5b50565b62000472816200032f565b81146200047e57600080fd5b50565b610f4c80620004916000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063313ce56711610071578063313ce5671461017a5780635c6581651461019857806370a08231146101c857806395d89b41146101f8578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a57806327e235e31461014a575b600080fd5b6100b6610276565b6040516100c39190610be3565b60405180910390f35b6100e660048036038101906100e19190610ae0565b610304565b6040516100f39190610bc8565b60405180910390f35b6101046103f6565b6040516101119190610c45565b60405180910390f35b610134600480360381019061012f9190610a91565b6103fc565b6040516101419190610bc8565b60405180910390f35b610164600480360381019061015f9190610a2c565b6106b9565b6040516101719190610c45565b60405180910390f35b6101826106d1565b60405161018f9190610c60565b60405180910390f35b6101b260048036038101906101ad9190610a55565b6106e4565b6040516101bf9190610c45565b60405180910390f35b6101e260048036038101906101dd9190610a2c565b610709565b6040516101ef9190610c45565b60405180910390f35b610200610751565b60405161020d9190610be3565b60405180910390f35b610230600480360381019061022b9190610ae0565b6107df565b60405161023d9190610bc8565b60405180910390f35b610260600480360381019061025b9190610a55565b61097b565b60405161026d9190610c45565b60405180910390f35b6003805461028390610da9565b80601f01602080910402602001604051908101604052809291908181526020018280546102af90610da9565b80156102fc5780601f106102d1576101008083540402835291602001916102fc565b820191906000526020600020905b8154815290600101906020018083116102df57829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103e49190610c45565b60405180910390a36001905092915050565b60025481565b600080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156104cc5750828110155b61050b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050290610c25565b60405180910390fd5b826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105599190610c97565b92505081905550826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ae9190610ced565b9250508190555082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106419190610ced565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516106a59190610c45565b60405180910390a360019150509392505050565b60006020528060005260406000206000915090505481565b600460009054906101000a900460ff1681565b6001602052816000526040600020602052806000526040600020600091509150505481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6005805461075e90610da9565b80601f016020809104026020016040519081016040528092919081815260200182805461078a90610da9565b80156107d75780601f106107ac576101008083540402835291602001916107d7565b820191906000526020600020905b8154815290600101906020018083116107ba57829003601f168201915b505050505081565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085990610c05565b60405180910390fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108b09190610ced565b92505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109059190610c97565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109699190610c45565b60405180910390a36001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081359050610a1181610ee8565b92915050565b600081359050610a2681610eff565b92915050565b600060208284031215610a3e57600080fd5b6000610a4c84828501610a02565b91505092915050565b60008060408385031215610a6857600080fd5b6000610a7685828601610a02565b9250506020610a8785828601610a02565b9150509250929050565b600080600060608486031215610aa657600080fd5b6000610ab486828701610a02565b9350506020610ac586828701610a02565b9250506040610ad686828701610a17565b9150509250925092565b60008060408385031215610af357600080fd5b6000610b0185828601610a02565b9250506020610b1285828601610a17565b9150509250929050565b610b2581610d33565b82525050565b6000610b3682610c7b565b610b408185610c86565b9350610b50818560208601610d76565b610b5981610e39565b840191505092915050565b6000610b71602f83610c86565b9150610b7c82610e4a565b604082019050919050565b6000610b94603983610c86565b9150610b9f82610e99565b604082019050919050565b610bb381610d5f565b82525050565b610bc281610d69565b82525050565b6000602082019050610bdd6000830184610b1c565b92915050565b60006020820190508181036000830152610bfd8184610b2b565b905092915050565b60006020820190508181036000830152610c1e81610b64565b9050919050565b60006020820190508181036000830152610c3e81610b87565b9050919050565b6000602082019050610c5a6000830184610baa565b92915050565b6000602082019050610c756000830184610bb9565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610ca282610d5f565b9150610cad83610d5f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ce257610ce1610ddb565b5b828201905092915050565b6000610cf882610d5f565b9150610d0383610d5f565b925082821015610d1657610d15610ddb565b5b828203905092915050565b6000610d2c82610d3f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610d94578082015181840152602081019050610d79565b83811115610da3576000848401525b50505050565b60006002820490506001821680610dc157607f821691505b60208210811415610dd557610dd4610e0a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f746f6b656e2062616c616e6365206973206c6f776572207468616e207468652060008201527f76616c7565207265717565737465640000000000000000000000000000000000602082015250565b7f746f6b656e2062616c616e6365206f7220616c6c6f77616e6365206973206c6f60008201527f776572207468616e20616d6f756e742072657175657374656400000000000000602082015250565b610ef181610d21565b8114610efc57600080fd5b50565b610f0881610d5f565b8114610f1357600080fd5b5056fea2646970667358221220496e0dde6671191e5095990bda16edebb15c058b1533631edcaa43c8f44c31c464736f6c63430008040033";

export class USDTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _initialAmount: BigNumberish,
    _tokenName: string,
    _decimalUnits: BigNumberish,
    _tokenSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<USDTest> {
    return super.deploy(
      _initialAmount,
      _tokenName,
      _decimalUnits,
      _tokenSymbol,
      overrides || {}
    ) as Promise<USDTest>;
  }
  getDeployTransaction(
    _initialAmount: BigNumberish,
    _tokenName: string,
    _decimalUnits: BigNumberish,
    _tokenSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _initialAmount,
      _tokenName,
      _decimalUnits,
      _tokenSymbol,
      overrides || {}
    );
  }
  attach(address: string): USDTest {
    return super.attach(address) as USDTest;
  }
  connect(signer: Signer): USDTest__factory {
    return super.connect(signer) as USDTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): USDTestInterface {
    return new utils.Interface(_abi) as USDTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): USDTest {
    return new Contract(address, _abi, signerOrProvider) as USDTest;
  }
}
