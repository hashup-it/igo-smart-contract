/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HashupGamerProfileInterface extends ethers.utils.Interface {
  functions: {
    "gotReward(address)": FunctionFragment;
    "nicknameOwners(string)": FunctionFragment;
    "pointsEarned(address)": FunctionFragment;
    "profiles(address)": FunctionFragment;
    "updateProfile(string,string,string,string,string,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "gotReward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "nicknameOwners",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pointsEarned",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "profiles", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateProfile",
    values: [string, string, string, string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "gotReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nicknameOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "profiles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProfile",
    data: BytesLike
  ): Result;

  events: {
    "UpdateProfile(address,string,string,string,string,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdateProfile"): EventFragment;
}

export type UpdateProfileEvent = TypedEvent<
  [string, string, string, string, string, string, string] & {
    user: string;
    newNickname: string;
    newColor: string;
    newAvatar: string;
    newDescription: string;
    newSocials: string;
    referrer: string;
  }
>;

export class HashupGamerProfile extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HashupGamerProfileInterface;

  functions: {
    gotReward(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    nicknameOwners(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    pointsEarned(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    profiles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        nickname: string;
        color: string;
        avatar: string;
        description: string;
        socials: string;
      }
    >;

    updateProfile(
      _nickname: string,
      _color: string,
      _avatar: string,
      _description: string,
      _socials: string,
      _refferer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  gotReward(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  nicknameOwners(arg0: string, overrides?: CallOverrides): Promise<string>;

  pointsEarned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  profiles(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string] & {
      nickname: string;
      color: string;
      avatar: string;
      description: string;
      socials: string;
    }
  >;

  updateProfile(
    _nickname: string,
    _color: string,
    _avatar: string,
    _description: string,
    _socials: string,
    _refferer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    gotReward(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    nicknameOwners(arg0: string, overrides?: CallOverrides): Promise<string>;

    pointsEarned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    profiles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        nickname: string;
        color: string;
        avatar: string;
        description: string;
        socials: string;
      }
    >;

    updateProfile(
      _nickname: string,
      _color: string,
      _avatar: string,
      _description: string,
      _socials: string,
      _refferer: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "UpdateProfile(address,string,string,string,string,string,address)"(
      user?: null,
      newNickname?: null,
      newColor?: null,
      newAvatar?: null,
      newDescription?: null,
      newSocials?: null,
      referrer?: null
    ): TypedEventFilter<
      [string, string, string, string, string, string, string],
      {
        user: string;
        newNickname: string;
        newColor: string;
        newAvatar: string;
        newDescription: string;
        newSocials: string;
        referrer: string;
      }
    >;

    UpdateProfile(
      user?: null,
      newNickname?: null,
      newColor?: null,
      newAvatar?: null,
      newDescription?: null,
      newSocials?: null,
      referrer?: null
    ): TypedEventFilter<
      [string, string, string, string, string, string, string],
      {
        user: string;
        newNickname: string;
        newColor: string;
        newAvatar: string;
        newDescription: string;
        newSocials: string;
        referrer: string;
      }
    >;
  };

  estimateGas: {
    gotReward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nicknameOwners(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pointsEarned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    profiles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateProfile(
      _nickname: string,
      _color: string,
      _avatar: string,
      _description: string,
      _socials: string,
      _refferer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gotReward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nicknameOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pointsEarned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    profiles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateProfile(
      _nickname: string,
      _color: string,
      _avatar: string,
      _description: string,
      _socials: string,
      _refferer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
