/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HashupIGOInterface extends ethers.utils.Interface {
  functions: {
    "burnFee()": FunctionFragment;
    "buyCartridge(address,uint256)": FunctionFragment;
    "distributePayment(uint256)": FunctionFragment;
    "getCartridgePrice(address)": FunctionFragment;
    "getPaymentToken(address)": FunctionFragment;
    "raisedAmount(address)": FunctionFragment;
    "reflinkAmount(address)": FunctionFragment;
    "reflinkFee()": FunctionFragment;
    "setCartridgeForSale(address,address,uint256,uint256)": FunctionFragment;
    "withdrawCartridges(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "burnFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyCartridge",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributePayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCartridgePrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "raisedAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reflinkAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reflinkFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCartridgeForSale",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCartridges",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "burnFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyCartridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCartridgePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raisedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reflinkAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reflinkFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCartridgeForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCartridges",
    data: BytesLike
  ): Result;

  events: {
    "Buy(address,uint256,uint256)": EventFragment;
    "Sale(address,address,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type BuyEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    cartridgeAddress: string;
    amount: BigNumber;
    price: BigNumber;
  }
>;

export type SaleEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    cartridgeAddress: string;
    paymentTokenAddress: string;
    price: BigNumber;
    amount: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber] & { cartridgeAddress: string; amount: BigNumber }
>;

export class HashupIGO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HashupIGOInterface;

  functions: {
    burnFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "buyCartridge(address,uint256)"(
      _cartridgeAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buyCartridge(address,uint256,address)"(
      _cartridgeAddress: string,
      _amount: BigNumberish,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributePayment(
      _totalValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        toCreator: BigNumber;
        toBurn: BigNumber;
        toReferrer: BigNumber;
      }
    >;

    getCartridgePrice(
      _cartridgeAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getPaymentToken(
      _cartridgeAddress: string,
      overrides?: CallOverrides
    ): Promise<[string] & { paymentToken: string }>;

    raisedAmount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    reflinkAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reflinkFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCartridgeForSale(
      _cartridgeAddress: string,
      _paymentTokenAddress: string,
      _price: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCartridges(
      _cartridgeAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burnFee(overrides?: CallOverrides): Promise<BigNumber>;

  "buyCartridge(address,uint256)"(
    _cartridgeAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buyCartridge(address,uint256,address)"(
    _cartridgeAddress: string,
    _amount: BigNumberish,
    _referrer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributePayment(
    _totalValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      toCreator: BigNumber;
      toBurn: BigNumber;
      toReferrer: BigNumber;
    }
  >;

  getCartridgePrice(
    _cartridgeAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPaymentToken(
    _cartridgeAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  raisedAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  reflinkAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  reflinkFee(overrides?: CallOverrides): Promise<BigNumber>;

  setCartridgeForSale(
    _cartridgeAddress: string,
    _paymentTokenAddress: string,
    _price: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCartridges(
    _cartridgeAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnFee(overrides?: CallOverrides): Promise<BigNumber>;

    "buyCartridge(address,uint256)"(
      _cartridgeAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "buyCartridge(address,uint256,address)"(
      _cartridgeAddress: string,
      _amount: BigNumberish,
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    distributePayment(
      _totalValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        toCreator: BigNumber;
        toBurn: BigNumber;
        toReferrer: BigNumber;
      }
    >;

    getCartridgePrice(
      _cartridgeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentToken(
      _cartridgeAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    raisedAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reflinkAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reflinkFee(overrides?: CallOverrides): Promise<BigNumber>;

    setCartridgeForSale(
      _cartridgeAddress: string,
      _paymentTokenAddress: string,
      _price: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawCartridges(
      _cartridgeAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Buy(address,uint256,uint256)"(
      cartridgeAddress?: null,
      amount?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { cartridgeAddress: string; amount: BigNumber; price: BigNumber }
    >;

    Buy(
      cartridgeAddress?: null,
      amount?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { cartridgeAddress: string; amount: BigNumber; price: BigNumber }
    >;

    "Sale(address,address,uint256,uint256)"(
      cartridgeAddress?: null,
      paymentTokenAddress?: null,
      price?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        cartridgeAddress: string;
        paymentTokenAddress: string;
        price: BigNumber;
        amount: BigNumber;
      }
    >;

    Sale(
      cartridgeAddress?: null,
      paymentTokenAddress?: null,
      price?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        cartridgeAddress: string;
        paymentTokenAddress: string;
        price: BigNumber;
        amount: BigNumber;
      }
    >;

    "Withdraw(address,uint256)"(
      cartridgeAddress?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { cartridgeAddress: string; amount: BigNumber }
    >;

    Withdraw(
      cartridgeAddress?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { cartridgeAddress: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    burnFee(overrides?: CallOverrides): Promise<BigNumber>;

    "buyCartridge(address,uint256)"(
      _cartridgeAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buyCartridge(address,uint256,address)"(
      _cartridgeAddress: string,
      _amount: BigNumberish,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributePayment(
      _totalValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCartridgePrice(
      _cartridgeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentToken(
      _cartridgeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raisedAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reflinkAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reflinkFee(overrides?: CallOverrides): Promise<BigNumber>;

    setCartridgeForSale(
      _cartridgeAddress: string,
      _paymentTokenAddress: string,
      _price: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCartridges(
      _cartridgeAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyCartridge(address,uint256)"(
      _cartridgeAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buyCartridge(address,uint256,address)"(
      _cartridgeAddress: string,
      _amount: BigNumberish,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributePayment(
      _totalValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCartridgePrice(
      _cartridgeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentToken(
      _cartridgeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raisedAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reflinkAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reflinkFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCartridgeForSale(
      _cartridgeAddress: string,
      _paymentTokenAddress: string,
      _price: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCartridges(
      _cartridgeAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
